/* CONSENSO */

- Attualmente protocollo broadcast: i veicoli scrivono sul canale e ricevono dal canale lo stesso tipo di informazione che hanno inviato. In locale fanno un merging.

- Ora pensiamo ad un protocollo diverso, tipo richieste in broadcast "Io sono 0, sto monitorando 1. Mi serve sapere se c'è qualcuno in questa e quest'area". Tutti scaricano le richieste dal broadcast e rispondono "Nella prima area c'è qualcuno, nella seconda no". Ma questa risposta non deve andare in broadcast perché è una risposta personale che capisce solo 0. Allora il canale può fungere da 'smistatore'. Problema: in reti con tanti veicoli è probabile che chi risponde debba dare informazioni simili a più veicoli. Allora non è meglio cercare una soluzione simile alla precedente in cui si comunica un'info più complicata ma almeno va bene per tutti mantenendo il protocollo broadcast con merging locale?

- Inoltre, una risposta semplice tipo sì/no per ogni area ti permette di dire se il veicolo viola o meno, però non permette cose più sofisticate tipo valutazione della gravità dell'infrazione. Però
è anche vero che anziché un semplice sì/no potremmo far dire, sì c'è un veicolo a x/y metri di distanza.

- Se metto a disposizione il mio 'local env' e faccio il merging con quello che vedono gli altri, posso direttamente verificare le regole con quello che vedo. Problema: non è detto che io stia vedendo tutte le azioni possibili. Ad esempio, quello che per me è solo un travel magari è travel + right overtake --> sarebbe infrazione. Ma non fa nulla, il consenso credo serva solo per dissipare dubbi che già si hanno, non per metterne altri. In realtà dipende da quanto decidiamo di fidarci del giudizio degli altri. Potremmo addirittura usare le info per runnare il sistema di action manager...a quel punto sarebbe in tutto e per tutto come avere gli occhi di tutti i monitor.

- Il problema con l'approccio del valutare le regole con gli occhi di tutti è che vanno aggiornate anche le aree visibili e invisibili. Non è un gran problema, però oltre a comunicare la sList bisogna
anche comunicare visibleArea. A quel punto hiddenArea -= consensusVisibleArea. hiddenArea->simplify().

- !!Dare la sList non va bene perché richiede SYNC!! 
